import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as a,e as t}from"./app-Dx7D4Rto.js";const l="/GetUrCourses_labs/assets/All-DnsDEovE.png",r="/GetUrCourses_labs/assets/Legend-unFPl73i.png",n="/GetUrCourses_labs/assets/Level_1-Dq1bidl4.png",s="/GetUrCourses_labs/assets/Level_2-CwSC9d0O.png",o="/GetUrCourses_labs/assets/Level_3-Dr5tuNLW.png",c={},p=t('<h1 id="проектування-архітектури-та-деталізоване-проектування" tabindex="-1"><a class="header-anchor" href="#проектування-архітектури-та-деталізоване-проектування"><span>Проектування архітектури та деталізоване проектування</span></a></h1><h2 id="архітектура" tabindex="-1"><a class="header-anchor" href="#архітектура"><span>Архітектура</span></a></h2><p>Для проекту було обрано мікросервісну архітектуру. Це підхід, коли єдиний додаток будується як сукупність невеликих, самодостатніх, незалежних, не тісно зв’язаних сервісів, що спілкуються між собою за допомогою легких механізмів як то HTTPs, gRPC, Kafka. Ці сервіси побудовані навколо бізнес-потреб (кожен відповідальний за конкретний процес) та розгортаються незалежно з використанням повністю автоматизованого середовища. Існує абсолютний мінімум централізованого управління цими сервісами. Самі по собі сервіси можуть бути написані на різних мовах і використовувати різні технології зберігання даних.</p><h2 id="причини-використання" tabindex="-1"><a class="header-anchor" href="#причини-використання"><span>Причини використання</span></a></h2><ul><li><p>Масштабованість: Кожен мікросервіс можна масштабувати окремо залежно від навантаження.</p></li><li><p>Незалежність розробки та розгортання: Команди можуть працювати над різними сервісами незалежно одна від одної. Це прискорює розробку, тестування і розгортання нових функцій без необхідності переписувати або переробляти всю систему.</p></li><li><p>Висока надійність: У разі збою одного з мікросервісів, інші сервіси продовжать працювати. Це підвищує загальну надійність системи.</p></li><li><p>Гнучкість у виборі технологій: Кожен сервіс можна розробляти з використанням найбільш відповідних для його завдань технологій.</p></li><li><p>Спрощення підтримки та оновлень: Оновлення одного мікросервісу не вимагає перезапуску всієї системи, що мінімізує простій під час обслуговування та оновлень.</p></li><li><p>Легка інтеграція з зовнішніми системами: сервіси можуть легко інтегруватися із зовнішніми API, що спрощує роботу з іншими системами.</p></li></ul><h2 id="діаграми" tabindex="-1"><a class="header-anchor" href="#діаграми"><span>Діаграми</span></a></h2><p>Для опису діаграм системи було обрано c4 модель</p><h3 id="загальнии-вигляд" tabindex="-1"><a class="header-anchor" href="#загальнии-вигляд"><span>Загальний вигляд</span></a></h3><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="легенда" tabindex="-1"><a class="header-anchor" href="#легенда"><span>Легенда</span></a></h4><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="першии-рівень" tabindex="-1"><a class="header-anchor" href="#першии-рівень"><span>Перший рівень</span></a></h3><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Ця діаграма ілюструє взаємодію між основними компонентами на першому рівні системи:</p><ul><li>Користувач (Customer) — це людина, яка бажає навчитися або викладати. Користувач має можливість отримати доступ до платформи для читання або створення курсів.</li><li>GetUrCourse Platform — це основна програмна система, яка надає доступ до курсів і дозволяє користувачам створювати або переглядати курси з різних тем.</li><li>Email Sender System — програмна система, яка відповідає за надсилання електронних листів. Платформа відправляє запити на цю систему для надсилання повідомлень користувачам.</li><li>Banking System — система для здійснення банківських транзакцій. Платформа взаємодіє з цією системою для проведення фінансових операцій, таких як оплата курсів.</li></ul><h3 id="другии-рівень" tabindex="-1"><a class="header-anchor" href="#другии-рівень"><span>Другий рівень</span></a></h3><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>На цій діаграмі зображено детальнішу архітектуру системи, де користувач взаємодіє з різними сервісами через веб-застосунок:</p><ul><li>Web Application — забезпечує інтерфейс для користувачів, де вони можуть переглядати курси, спілкуватися з викладачами і використовувати чат.</li><li>API Gateway — шлюз, що приймає всі запити від веб-застосунку і пересилає їх відповідним сервісам.</li><li>Course Service — сервіс, який надає детальний огляд курсів.</li><li>Chat Service — сервіс для спілкування користувачів між собою за допомогою чатів.</li><li>Task Service — відповідає за зберігання рішень користувачів щодо завдань.</li><li>Auth Provider — сервіс аутентифікації користувачів.</li><li>Payment Service — сервіс для проведення банківських транзакцій через систему Liqpay.</li><li>Notification Service — сервіс для надсилання повідомлень через MailJet.</li><li>User Service — сервіс для зберігання даних користувачів.</li></ul><p>Ці компоненти взаємодіють через API Gateway, забезпечуючи високий рівень масштабованості та ізольованості мікросервісів.</p><h3 id="третіи-рівень" tabindex="-1"><a class="header-anchor" href="#третіи-рівень"><span>Третій рівень</span></a></h3><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Ця діаграма описує інфраструктурні аспекти архітектури:</p><ul><li>Web Application, API Gateway, і різні сервіси розміщені на окремих серверах або контейнерах (Docker).</li><li>Course Service, Chat Service, Task Service та інші сервіси використовують бази даних для зберігання даних (PostgreSQL, Redis, MongoDB).</li><li>Kafka — використовується як шина повідомлень для обміну даними між сервісами.</li><li>Auth Provider, Payment Service, і Notification Service також інтегровані з відповідними базами даних і зовнішніми системами для забезпечення безпеки, фінансових операцій і повідомлень.</li></ul>',24),d=[p];function h(m,g){return i(),a("div",null,d)}const _=e(c,[["render",h],["__file","arch.html.vue"]]),v=JSON.parse('{"path":"/architecture/arch.html","title":"Проектування архітектури та деталізоване проектування","lang":"en-US","frontmatter":{"description":"Проектування архітектури та деталізоване проектування Архітектура Для проекту було обрано мікросервісну архітектуру. Це підхід, коли єдиний додаток будується як сукупність невел...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/GetUrCourses_labs/architecture/arch.html"}],["meta",{"property":"og:site_name","content":"GetUrCourse"}],["meta",{"property":"og:title","content":"Проектування архітектури та деталізоване проектування"}],["meta",{"property":"og:description","content":"Проектування архітектури та деталізоване проектування Архітектура Для проекту було обрано мікросервісну архітектуру. Це підхід, коли єдиний додаток будується як сукупність невел..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-27T17:56:13.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-27T17:56:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Проектування архітектури та деталізоване проектування\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-27T17:56:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Архітектура","slug":"архітектура","link":"#архітектура","children":[]},{"level":2,"title":"Причини використання","slug":"причини-використання","link":"#причини-використання","children":[]},{"level":2,"title":"Діаграми","slug":"діаграми","link":"#діаграми","children":[{"level":3,"title":"Загальний вигляд","slug":"загальнии-вигляд","link":"#загальнии-вигляд","children":[]},{"level":3,"title":"Перший рівень","slug":"першии-рівень","link":"#першии-рівень","children":[]},{"level":3,"title":"Другий рівень","slug":"другии-рівень","link":"#другии-рівень","children":[]},{"level":3,"title":"Третій рівень","slug":"третіи-рівень","link":"#третіи-рівень","children":[]}]}],"git":{"createdTime":1726908864000,"updatedTime":1727459773000,"contributors":[{"name":"maksimbilyk","email":"pdo090318@gmail.com","commits":3},{"name":"Dmytro Zanuda","email":"dmzanuda.work@gmail.com","commits":1}]},"readingTime":{"minutes":1.68,"words":503},"filePathRelative":"architecture/arch.md","localizedDate":"September 21, 2024","autoDesc":true}');export{_ as comp,v as data};
