import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,b as s,d as t,e as i}from"./app-DCDZL_En.js";const l="/GetUrCourses_labs/assets/Lab6_2-BpYYI6UY.jpg",u="/GetUrCourses_labs/assets/Lab6_3-BA6sOeG_.jpg",k="/GetUrCourses_labs/assets/Lab6_1-C77xXKNm.jpg",r="/GetUrCourses_labs/assets/Lab6_4-B22pOoSN.jpg",d={},m=i(`<h1 id="тестування-та-валідація" tabindex="-1"><a class="header-anchor" href="#тестування-та-валідація"><span>Тестування та валідація</span></a></h1><p>Після аналізу всього проєкту та коду було написано відповідні тести, а саме юніт, компонентні та системні.</p><h2 id="підготовка-до-тестування" tabindex="-1"><a class="header-anchor" href="#підготовка-до-тестування"><span>Підготовка до тестування</span></a></h2><ul><li>Перевірка, що всі компоненти системи завершені та інтегровані.</li><li>Створення списку функціональних та нефункціональних вимог до системи.</li><li>Визначення інструментів для проведення тестування (наприклад, Moq та Postman).</li></ul><h2 id="юніт-тестування" tabindex="-1"><a class="header-anchor" href="#юніт-тестування"><span>Юніт-тестування</span></a></h2><ul><li>Написано тести для ключових модулів та функцій.</li><li>Провірено коректність обчислень, обробки даних та логіки в функціях.</li><li>Для автоматизації тестування використовувались Moq та Xunit.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>PaymentAPI<span class="token punctuation">.</span>Constants</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>PaymentAPI<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>Repositories</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>PaymentAPI<span class="token punctuation">.</span>Models</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Moq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Newtonsoft<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">PaymentAPI<span class="token punctuation">.</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Xunit</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentServiceTests</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Mock<span class="token punctuation">&lt;</span>IPaymentRepository<span class="token punctuation">&gt;</span></span> _mockRepository<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">PaymentService</span> _paymentService<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token function">PaymentServiceTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_mockRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IPaymentRepository<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_paymentService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaymentService</span><span class="token punctuation">(</span><span class="token string">&quot;testPublicKey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;testPrivateKey&quot;</span><span class="token punctuation">,</span> _mockRepository<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">CreatePaymentAsync_ShouldReturnPaymentUrlAndSavePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">string</span></span> orderId <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">string</span></span> action <span class="token operator">=</span> <span class="token string">&quot;pay&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">decimal</span></span> amount <span class="token operator">=</span> <span class="token number">100.50m</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">string</span></span> description <span class="token operator">=</span> <span class="token string">&quot;Test Payment&quot;</span><span class="token punctuation">;</span>

		_mockRepository<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>repo <span class="token operator">=&gt;</span> repo<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Payment<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Act</span>
		<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _paymentService<span class="token punctuation">.</span><span class="token function">CreatePaymentAsync</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> action<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert</span>
		Assert<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.liqpay.ua/api/3/checkout&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		_mockRepository<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>repo <span class="token operator">=&gt;</span> repo<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Payment<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span>
			p<span class="token punctuation">.</span>OrderId <span class="token operator">==</span> orderId <span class="token operator">&amp;&amp;</span>
			p<span class="token punctuation">.</span>Action <span class="token operator">==</span> action <span class="token operator">&amp;&amp;</span>
			p<span class="token punctuation">.</span>Amount <span class="token operator">==</span> amount <span class="token operator">&amp;&amp;</span>
			p<span class="token punctuation">.</span>Description <span class="token operator">==</span> description <span class="token operator">&amp;&amp;</span>
			p<span class="token punctuation">.</span>Status <span class="token operator">==</span> PaymentSettings<span class="token punctuation">.</span>IsCreated
		<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Times<span class="token punctuation">.</span>Once<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandlePaymentResultAsync_ShouldReturnFalse_WhenPaymentNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">string</span></span> orderId <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> requestDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
		<span class="token punctuation">{</span>
			<span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span>
			<span class="token punctuation">{</span>
				version <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span>
				order_id <span class="token operator">=</span> orderId<span class="token punctuation">,</span>
				status <span class="token operator">=</span> <span class="token string">&quot;success&quot;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span><span class="token string">&quot;signature&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;testSignature&quot;</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>

		_mockRepository<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>repo <span class="token operator">=&gt;</span> repo<span class="token punctuation">.</span><span class="token function">GetByOrderIdAsync</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Act</span>
		<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _paymentService<span class="token punctuation">.</span><span class="token function">HandlePaymentResultAsync</span><span class="token punctuation">(</span>requestDictionary<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert</span>
		Assert<span class="token punctuation">.</span><span class="token function">False</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">UnsubscribeAsync_ShouldReturnFalse_WhenPaymentNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">string</span></span> orderId <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>

		_mockRepository<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>repo <span class="token operator">=&gt;</span> repo<span class="token punctuation">.</span><span class="token function">GetByOrderIdAsync</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Act</span>
		<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _paymentService<span class="token punctuation">.</span><span class="token function">UnsubscribeAsync</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert</span>
		Assert<span class="token punctuation">.</span><span class="token function">False</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">CreatePaymentAsync_ShouldThrowException_WhenAmountIsNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">string</span></span> orderId <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">string</span></span> action <span class="token operator">=</span> <span class="token string">&quot;pay&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">decimal</span></span> amount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">string</span></span> description <span class="token operator">=</span> <span class="token string">&quot;Test Payment&quot;</span><span class="token punctuation">;</span>

		<span class="token comment">// Act &amp; Assert</span>
		<span class="token keyword">await</span> Assert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ThrowsAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ArgumentException<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
			_paymentService<span class="token punctuation">.</span><span class="token function">CreatePaymentAsync</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> action<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandlePaymentResultAsync_ShouldThrowException_WhenDataIsInvalid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">var</span></span> requestDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
		<span class="token punctuation">{</span>
			<span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;InvalidBase64Data&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span><span class="token string">&quot;signature&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;testSignature&quot;</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>

		<span class="token comment">// Act &amp; Assert</span>
		<span class="token keyword">await</span> Assert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ThrowsAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FormatException<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
			_paymentService<span class="token punctuation">.</span><span class="token function">HandlePaymentResultAsync</span><span class="token punctuation">(</span>requestDictionary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Було написано юніт тести для Payment та Task Services.</p><ul><li>Цей код містить тести для PaymentService (сервісу обробки платежів), реалізовані за допомогою XUnit і Moq. Основні аспекти: Мок об&#39;єкта репозиторію: Використовується Mock IPaymentRepository для імітації методів репозиторію платежів.</li><li>Тестування створення платежів: Метод CreatePaymentAsync перевіряється на генерацію URL для оплати та збереження платежу в репозиторії. Виявлення помилок, наприклад, якщо сума платежу негативна.</li><li>Обробка результатів платежів: Метод HandlePaymentResultAsync перевіряється на обробку результатів платежу, включно з випадками, коли дані некоректні або платіж не знайдено.</li><li>Відписка від платежів: Метод UnsubscribeAsync тестується на поведінку, коли відповідний платіж не знайдено.</li><li>Перевірка викликів: Використовується Verify для перевірки, чи було викликано методи репозиторію з правильними параметрами.</li></ul><p><img src="`+l+`" alt="" loading="lazy"><br> По результатам тестування можна побачити, що все проходить успішно.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>TaskAPI<span class="token punctuation">.</span>Controllers</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>TaskAPI<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Http</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Moq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Xunit</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilesControllerTests</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">FilesController</span> _controller<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Mock<span class="token punctuation">&lt;</span>IFileService<span class="token punctuation">&gt;</span></span> _mockFileService<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token function">FilesControllerTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_mockFileService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IFileService<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FilesController</span><span class="token punctuation">(</span>_mockFileService<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">UploadFile_ShouldReturnBadRequest_WhenFileIsInvalid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name">IFormFile</span> mockFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

		_mockFileService<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">UploadFileAsync</span><span class="token punctuation">(</span>mockFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThrowsAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;File is invalid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Act</span>
		<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _controller<span class="token punctuation">.</span><span class="token function">UploadFile</span><span class="token punctuation">(</span>mockFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert</span>
		<span class="token class-name"><span class="token keyword">var</span></span> badRequestResult <span class="token operator">=</span> Assert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BadRequestObjectResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;File is invalid&quot;</span><span class="token punctuation">,</span> badRequestResult<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Цей код містить тест для контролера FilesController, який обробляє завантаження файлів.</p><ul><li>Мок об&#39;єкта сервісу: Використовується Mock IFileService для імітації методів сервісу файлів.</li><li>Контролер: Тестується метод UploadFile, який приймає файли через IFormFile.</li><li>Тест на некоректний файл: Якщо вхідний файл є null, метод сервісу UploadFileAsync кидає ArgumentException.</li><li>Перевіряється, що контролер повертає BadRequestObjectResult зі значенням повідомлення про помилку.</li><li>Перевірка результатів: Використовується Assert.IsType для перевірки типу відповіді.</li><li>Значення відповіді перевіряється на відповідність очікуваному тексту помилки. Код зосереджується на негативному сценарії для завантаження файлів, забезпечуючи валідацію вхідних даних і відповідну обробку помилок.</li></ul><p><img src="`+u+`" alt="" loading="lazy"><br> По результатам тестування можна побачити, що все проходить успішно.</p><h2 id="тестування-компонентів" tabindex="-1"><a class="header-anchor" href="#тестування-компонентів"><span>Тестування компонентів</span></a></h2><ul><li>Перевірка взаємодії між модулями та складовими системи.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Xunit</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Moq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>NotificationAPI<span class="token punctuation">.</span>Controllers</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>NotificationAPI<span class="token punctuation">.</span>Dto</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>NotificationAPI<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>NotificationService</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationSenderControllerTests</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Mock<span class="token punctuation">&lt;</span>INotificationService<span class="token punctuation">&gt;</span></span> _notificationServiceMock<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">NotificationSenderController</span> _controller<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token function">NotificationSenderControllerTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_notificationServiceMock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>INotificationService<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotificationSenderController</span><span class="token punctuation">(</span>_notificationServiceMock<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendConfirmEmail_ShouldReturnOk_WhenServiceReturnsTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">var</span></span> userDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span> <span class="token punctuation">{</span> Email <span class="token operator">=</span> <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span> FullName <span class="token operator">=</span> <span class="token string">&quot;Test User&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		_notificationServiceMock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">SendConfirmEmailAsync</span><span class="token punctuation">(</span>userDto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Act</span>
		<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _controller<span class="token punctuation">.</span><span class="token function">SendConfirmEmail</span><span class="token punctuation">(</span>userDto<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert</span>
		Assert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OkResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendConfirmEmail_ShouldReturnNotFound_WhenServiceReturnsFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">var</span></span> userDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span> <span class="token punctuation">{</span> Email <span class="token operator">=</span> <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span> FullName <span class="token operator">=</span> <span class="token string">&quot;Test User&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		_notificationServiceMock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">SendConfirmEmailAsync</span><span class="token punctuation">(</span>userDto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Act</span>
		<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _controller<span class="token punctuation">.</span><span class="token function">SendConfirmEmail</span><span class="token punctuation">(</span>userDto<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert</span>
		<span class="token class-name"><span class="token keyword">var</span></span> notFoundResult <span class="token operator">=</span> Assert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NotFoundObjectResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;Template file not found.&quot;</span><span class="token punctuation">,</span> notFoundResult<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendRegisterCourseEmail_ShouldCallServiceWithCorrectParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">var</span></span> userDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span> <span class="token punctuation">{</span> Email <span class="token operator">=</span> <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span> FullName <span class="token operator">=</span> <span class="token string">&quot;Test User&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> courseName <span class="token operator">=</span> <span class="token string">&quot;C# Basics&quot;</span><span class="token punctuation">;</span>
		_notificationServiceMock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">SendRegisterCourseEmailAsync</span><span class="token punctuation">(</span>userDto<span class="token punctuation">,</span> courseName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Act</span>
		<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _controller<span class="token punctuation">.</span><span class="token function">SendRegisterCourseEmail</span><span class="token punctuation">(</span>userDto<span class="token punctuation">,</span> courseName<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert</span>
		_notificationServiceMock<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">SendRegisterCourseEmailAsync</span><span class="token punctuation">(</span>userDto<span class="token punctuation">,</span> courseName<span class="token punctuation">)</span><span class="token punctuation">,</span> Times<span class="token punctuation">.</span>Once<span class="token punctuation">)</span><span class="token punctuation">;</span>
		Assert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OkResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Цей код містить тести для NotificationSenderController, який обробляє відправлення різних типів email-повідомлень</p><ul><li>Мок сервісу нотифікацій: Використовується Mock INotificationService для імітації методів сервісу відправлення email-повідомлень.</li><li>Методи контролера: SendConfirmEmail: Тестуються два сценарії. Успіх: Сервіс повертає true, контролер відповідає OkResult. Помилка: Сервіс повертає false, контролер відповідає NotFoundObjectResult з текстом &quot;Template file not found.&quot; та SendRegisterCourseEmail: Перевіряється, що сервіс викликається з правильними параметрами, а відповідь контролера — OkResult.</li><li>Перевірка відповідей: Використовується Assert.IsType для перевірки типу результату. Для NotFoundObjectResult додатково перевіряється значення відповіді.</li><li>Перевірка викликів: Метод Verify переконується, що сервіс викликаний із очікуваними параметрами у методі SendRegisterCourseEmail.<br><img src="`+k+`" alt="" loading="lazy"></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Xunit</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Moq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>NotificationAPI<span class="token punctuation">.</span>Consumers</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>NotificationAPI<span class="token punctuation">.</span>Dto</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>NotificationAPI<span class="token punctuation">.</span>Infrastructure<span class="token punctuation">.</span>NotificationService</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">GetUrCourse<span class="token punctuation">.</span>Contracts<span class="token punctuation">.</span>User</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">MassTransit</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Logging</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyConsumerTests</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Mock<span class="token punctuation">&lt;</span>INotificationService<span class="token punctuation">&gt;</span></span> _notificationServiceMock<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Mock<span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&lt;</span>NotifyConsumer<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> _loggerMock<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Mock<span class="token punctuation">&lt;</span>ConsumeContext<span class="token punctuation">&lt;</span>NotifyUser<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> _consumeContextMock<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">NotifyConsumer</span> _consumer<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token function">NotifyConsumerTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_notificationServiceMock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>INotificationService<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_loggerMock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&lt;</span>NotifyConsumer<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_consumeContextMock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>ConsumeContext<span class="token punctuation">&lt;</span>NotifyUser<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotifyConsumer</span><span class="token punctuation">(</span>_notificationServiceMock<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> _loggerMock<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Consume_ShouldCallServiceAndPublishEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Arrange</span>
		<span class="token class-name"><span class="token keyword">var</span></span> notifyUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotifyUser</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;test@example.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Test User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_consumeContextMock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span>notifyUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
		_notificationServiceMock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">SendConfirmEmailAsync</span><span class="token punctuation">(</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Act</span>
		<span class="token keyword">await</span> _consumer<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span>_consumeContextMock<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Assert</span>
		_notificationServiceMock<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">SendConfirmEmailAsync</span><span class="token punctuation">(</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
			u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Email <span class="token operator">==</span> notifyUser<span class="token punctuation">.</span>Email <span class="token operator">&amp;&amp;</span> u<span class="token punctuation">.</span>FullName <span class="token operator">==</span> notifyUser<span class="token punctuation">.</span>FullName
		<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Times<span class="token punctuation">.</span>Once<span class="token punctuation">)</span><span class="token punctuation">;</span>

		_consumeContextMock<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserNotified<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
			e <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>UserId <span class="token operator">==</span> notifyUser<span class="token punctuation">.</span>UserId <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Email <span class="token operator">==</span> notifyUser<span class="token punctuation">.</span>Email
		<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Times<span class="token punctuation">.</span>Once<span class="token punctuation">)</span><span class="token punctuation">;</span>

		_loggerMock<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>
			x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>
				LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">,</span>
				It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventId<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>It<span class="token punctuation">.</span>IsAnyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;User notifying started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">null</span><span class="token punctuation">,</span>
				It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>It<span class="token punctuation">.</span>IsAnyType<span class="token punctuation">,</span> Exception<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">,</span>
			Times<span class="token punctuation">.</span>Once<span class="token punctuation">)</span><span class="token punctuation">;</span>

		_loggerMock<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>
			x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>
				LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">,</span>
				It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventId<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>It<span class="token punctuation">.</span>IsAnyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;User notifying finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">null</span><span class="token punctuation">,</span>
				It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>It<span class="token punctuation">.</span>IsAnyType<span class="token punctuation">,</span> Exception<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">,</span>
			Times<span class="token punctuation">.</span>Once<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Цей код тестує NotifyConsumer, який відповідає за обробку повідомлень типу NotifyUser за допомогою MassTransit.</p><p>Моки залежностей:</p><ul><li>Mock INotificationService: Для імітації сервісу нотифікацій.</li><li>Mock ILogger NotifyConsumer: Для перевірки логування.</li><li>Mock ConsumeContext NotifyUser: Для імітації контексту обробки повідомлення. Тестований метод:</li><li>Consume: Метод, який обробляє повідомлення NotifyUser. Основні дії тесту:</li><li>Підготовка: Імітація повідомлення NotifyUser. Налаштування повернення true від сервісу нотифікацій.</li><li>Перевірка викликів: Метод сервісу SendConfirmEmailAsync викликається з правильним об&#39;єктом UserDto. Метод Publish викликається для публікації події UserNotified з правильними даними. Логування інформаційних повідомлень (початок і завершення нотифікації).</li><li>Перевірка результатів: Використовуються методи Verify для підтвердження, що потрібні методи викликаються рівно один раз із правильними параметрами.</li><li>Логування: Перевіряється, що логуються повідомлення на початку і в кінці обробки повідомлення. <img src="`+r+'" alt="" loading="lazy"></li></ul><p>За результатими тестування в цьому розділі видно, що все працює та проходить успішно.</p><h2 id="системне-тестування" tabindex="-1"><a class="header-anchor" href="#системне-тестування"><span>Системне тестування</span></a></h2>',25),v=n("br",null,null,-1),b={href:"https://drive.google.com/file/d/109QIg0GT5WcRkHUx_oivV6VDH0585HmP/view?usp=sharing",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),g=n("h2",{id:"завантаження-в-репозиторіи-на-github",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#завантаження-в-репозиторіи-на-github"},[n("span",null,"Завантаження в репозиторій на GitHub")])],-1),f={href:"https://github.com/D0wnfal1/GetUrCourse/tree/dev",target:"_blank",rel:"noopener noreferrer"};function w(h,_){const a=e("ExternalLinkIcon");return o(),c("div",null,[m,n("ul",null,[n("li",null,[s("Перевірка головних функцій системи (наприклад реєстрація користувача)."),v,s(" Детеальне тестування проєкту можна подивитися за "),n("a",b,[s("посиланням"),t(a)]),y,s(" З відео можна побачити, що брокер та сервіси працюють так як потрібно, тому можна сказати, що системне тестування успішне.")])]),g,n("p",null,[s("Детально з файлами проєкту можна ознайомитися за "),n("a",f,[s("посиланням"),t(a)])])])}const I=p(d,[["render",w],["__file","test.html.vue"]]),C=JSON.parse('{"path":"/test/test.html","title":"Тестування та валідація","lang":"en-US","frontmatter":{"description":"Тестування та валідація Після аналізу всього проєкту та коду було написано відповідні тести, а саме юніт, компонентні та системні. Підготовка до тестування Перевірка, що всі ком...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/GetUrCourses_labs/test/test.html"}],["meta",{"property":"og:site_name","content":"GetUrCourse"}],["meta",{"property":"og:title","content":"Тестування та валідація"}],["meta",{"property":"og:description","content":"Тестування та валідація Після аналізу всього проєкту та коду було написано відповідні тести, а саме юніт, компонентні та системні. Підготовка до тестування Перевірка, що всі ком..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-03T09:07:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-03T09:07:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Тестування та валідація\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-03T09:07:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Підготовка до тестування","slug":"підготовка-до-тестування","link":"#підготовка-до-тестування","children":[]},{"level":2,"title":"Юніт-тестування","slug":"юніт-тестування","link":"#юніт-тестування","children":[]},{"level":2,"title":"Тестування компонентів","slug":"тестування-компонентів","link":"#тестування-компонентів","children":[]},{"level":2,"title":"Системне тестування","slug":"системне-тестування","link":"#системне-тестування","children":[]},{"level":2,"title":"Завантаження в репозиторій на GitHub","slug":"завантаження-в-репозиторіи-на-github","link":"#завантаження-в-репозиторіи-на-github","children":[]}],"git":{"createdTime":1735596702000,"updatedTime":1735895237000,"contributors":[{"name":"maksimbilyk","email":"pdo090318@gmail.com","commits":2}]},"readingTime":{"minutes":4.06,"words":1218},"filePathRelative":"test/test.md","localizedDate":"December 30, 2024","autoDesc":true}');export{I as comp,C as data};
